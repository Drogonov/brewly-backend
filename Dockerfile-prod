FROM node:20-alpine as builder
WORKDIR /usr/src/app

# Install Nest CLI globally
RUN npm install -g @nestjs/cli

# Make sure local .bin is on PATH (in case other local binaries are needed)
ENV PATH /usr/src/app/node_modules/.bin:$PATH

COPY package.json package-lock.json ./
RUN npm ci

COPY prisma ./prisma
COPY config ./config

RUN npx dotenv -e ./config/production.env -- prisma generate
COPY . .

# Build the application
RUN npm run build

# Stage 2: Production Stage
FROM node:20-alpine

# Set the working directory inside the container
WORKDIR /usr/src/app

# Copy necessary files from the builder stage
COPY --from=builder /usr/src/app/node_modules ./node_modules
COPY --from=builder /usr/src/app/package.json ./
COPY --from=builder /usr/src/app/dist ./dist
COPY --from=builder /usr/src/app/prisma ./prisma
COPY --from=builder /usr/src/app/config ./config
COPY --from=builder /usr/src/app/src/i18n ./dist/i18n

# Create the log directory for Pino (must match /var/log/brewly-backend)
RUN mkdir -p /var/log/brewly-backend

# Install OpenSSL for secure connections
RUN apk add --no-cache openssl

# Install dockerize for service health checks
ENV DOCKERIZE_VERSION v0.6.0
RUN wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-alpine-linux-amd64-$DOCKERIZE_VERSION.tar.gz \
    && tar -C /usr/local/bin -xzvf dockerize-alpine-linux-amd64-$DOCKERIZE_VERSION.tar.gz \
    && rm dockerize-alpine-linux-amd64-$DOCKERIZE_VERSION.tar.gz

# Ensure the database is ready before starting the application
CMD ["sh", "-c", \
    "npm run prisma:generate-prod && npm run prisma:db-push-prod && dockerize -wait tcp://${DB_HOST}:${DB_PORT} -timeout 60s && npm run start:prod"]