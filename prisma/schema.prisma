// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// ──────────────────────────────────────────────────────
//  USER / SESSION
// ──────────────────────────────────────────────────────
//

model User {
  id                 Int                     @id @default(autoincrement())
  createdAt          DateTime                @default(now())
  updatedAt          DateTime                @updatedAt
  userName           String?
  userImageURL       String?
  email              String                  @unique
  hash               String
  otpHash            String?
  isVerificated      Boolean
  currentCompanyId   Int?
  currentCompany     Company?                @relation("CurrentUserCompany", fields: [currentCompanyId], references: [id])
  sessions           Session[]
  invitedCuppings    Cupping[]               @relation("CuppingInvitedUsers")
  sampleTestings     SampleTesting[]
  cuppingSettings    CuppingSettings[]
  createdCuppings    Cupping[]               @relation("CreatedCuppingsByUser")
  relatedToCompanies UserToCompanyRelation[] @relation("RelatedCompanies")
}

model Session {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  hashedRt  String?
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

enum Role {
  OWNER
  CHIEF
  BARISTA
}

model UserToCompanyRelation {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    Int
  companyId Int

  user    User    @relation("RelatedCompanies", fields: [userId], references: [id])
  company Company @relation("RelatedUsers", fields: [companyId], references: [id])

  role Role

  @@unique([userId, companyId])
}

//
// ──────────────────────────────────────────────────────
//  COMPANY
// ──────────────────────────────────────────────────────
//

model Company {
  id              Int                     @id @default(autoincrement())
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
  relatedToUsers  UserToCompanyRelation[] @relation("RelatedUsers")
  sampleTypes     SampleType[]            @relation("SampleTypesOwnedByCompany")
  sampleItems     SampleItem[]
  cuppings        Cupping[]
  cuppingSettings CuppingSettings[]
  cuppingResult   CuppingResult[]
  sampleTesting   SampleTesting[]
  currentTeam     User[]                  @relation("CurrentUserCompany")
  isPersonal      Boolean
  companyName     String
  companyImageURL String?
}

//
// ──────────────────────────────────────────────────────
//  CUPPING CUPPING / RESULT / SETTINGS
// ──────────────────────────────────────────────────────
//

model Cupping {
  id               Int             @id @default(autoincrement())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  cuppingCreatorId Int
  cuppingCreator   User            @relation("CreatedCuppingsByUser", fields: [cuppingCreatorId], references: [id])
  cuppingName      String
  companyId        Int
  company          Company         @relation(fields: [companyId], references: [id])
  settingsId       Int
  settings         CuppingSettings @relation(fields: [settingsId], references: [id])
  invitedUsers     User[]          @relation("CuppingInvitedUsers")
  sampleItems      SampleItem[]    @relation("CuppingSampleItems")
  sampleTestings   SampleTesting[]
  cuppingResult    CuppingResult?
}

model CuppingResult {
  id                   Int                      @id @default(autoincrement())
  createdAt            DateTime                 @default(now())
  updatedAt            DateTime                 @updatedAt
  companyId            Int
  company              Company                  @relation(fields: [companyId], references: [id])
  cuppingId            Int                      @unique
  cupping              Cupping                  @relation(fields: [cuppingId], references: [id])
  cuppingTimeInSeconds Int
  results              CuppingResultForSample[]
}

model CuppingResultForSample {
  id                     Int            @id @default(autoincrement())
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  cuppingResultId        Int
  cuppingResult          CuppingResult  @relation(fields: [cuppingResultId], references: [id])
  averageScore           Int
  averageSampleTestingId Int?
  sampleTesting          SampleTesting? @relation(fields: [averageSampleTestingId], references: [id])
}

model CuppingSettings {
  id                    Int       @id @default(autoincrement())
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  randomSamplesOrder    Boolean
  openSampleNameCupping Boolean
  singleUserCupping     Boolean
  inviteAllTeammates    Boolean
  cuppings              Cupping[]
  companyId             Int
  company               Company   @relation(fields: [companyId], references: [id])
  userId                Int
  user                  User      @relation(fields: [userId], references: [id])
}

//
// ──────────────────────────────────────────────────────
//  SAMPLE TYPE / ITEM / ROAST TYPE / COFFEE TYPE
// ──────────────────────────────────────────────────────
//

model SampleType {
  id                Int          @id @default(autoincrement())
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  originCompanyName String
  sampleName        String
  roastTypeId       Int
  roastType         RoastType    @relation(fields: [roastTypeId], references: [id])
  coffeTypeId       Int
  coffeeType        CoffeeType   @relation(fields: [coffeTypeId], references: [id])
  company           Company[]    @relation("SampleTypesOwnedByCompany")
  sampleItems       SampleItem[]
}

model SampleItem {
  id            Int             @id @default(autoincrement())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  companyId     Int
  company       Company         @relation(fields: [companyId], references: [id])
  sampleTypeId  Int
  sampleType    SampleType      @relation(fields: [sampleTypeId], references: [id])
  roastDate     DateTime
  openDate      DateTime
  wheight       Int // in gramms
  barCode       String
  cuppings      Cupping[]       @relation("CuppingSampleItems")
  sampleTesting SampleTesting[]
}

model RoastType {
  id         Int          @id @default(autoincrement())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  value      String
  isCustom   Boolean
  sampleType SampleType[]
}

model CoffeeType {
  id         Int          @id @default(autoincrement())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  value      String
  isCustom   Boolean
  sampleType SampleType[]
}

//
// ──────────────────────────────────────────────────────
//  SAMPLE TESTING / PROPERTIES
// ──────────────────────────────────────────────────────
//

model SampleTesting {
  id                       Int                      @id @default(autoincrement())
  createdAt                DateTime                 @default(now())
  updatedAt                DateTime                 @updatedAt
  userId                   Int
  user                     User                     @relation(fields: [userId], references: [id])
  companyId                Int
  company                  Company                  @relation(fields: [companyId], references: [id])
  cuppingId                Int
  cupping                  Cupping                  @relation(fields: [cuppingId], references: [id])
  sampleItemId             Int
  sampleItem               SampleItem               @relation(fields: [sampleItemId], references: [id])
  userTestingTimeInSeconds Int
  userSampleProperties     SampleProperty[]
  cuppingResultForSample   CuppingResultForSample[]
}

model SampleProperty {
  id              Int           @id @default(autoincrement())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  propertyTypeId  Int
  propertyType    PropertyType  @relation(fields: [propertyTypeId], references: [id])
  intensity       Int
  quality         Int
  comment         String
  sampleTestingId Int
  sampleTesting   SampleTesting @relation(fields: [sampleTestingId], references: [id])
}

model PropertyType {
  id               Int              @id @default(autoincrement())
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  propertyName     String
  sampleProperties SampleProperty[]
}
