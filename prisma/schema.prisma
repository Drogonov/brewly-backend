generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// ──────────────────────────────────────────────────────
//  USER / SESSION
// ──────────────────────────────────────────────────────
//

model User {
  id                      Int                      @id @default(autoincrement())
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  deletedAt               DateTime?
  userName                String?
  userImageURL            String?
  email                   String                   @unique
  about                   String?
  hash                    String
  otpHash                 String?
  otpExpiresAt            DateTime?
  isVerificated           Boolean
  currentCompanyId        Int?
  currentCompany          Company?                 @relation("CurrentUserCompany", fields: [currentCompanyId], references: [id], onDelete: Cascade)
  sessions                Session[]
  cuppingInvitations      CuppingInvitation[]
  sampleTestings          SampleTesting[]
  cuppingSettings         CuppingSettings[]
  createdCuppings         Cupping[]                @relation("CreatedCuppingsByUser")
  relatedToCompanies      UserToCompanyRelation[]  @relation("RelatedCompanies")
  sentFriendships         Friendship[]             @relation("FriendshipSender")
  receivedFriendships     Friendship[]             @relation("FriendshipReceiver")
  sentTeamInvitations     TeamInvitation[]         @relation("TeamInvitationSender")
  receivedTeamInvitations TeamInvitation[]         @relation("TeamInvitationReceiver")
  defaultCuppingSettings  DefaultCuppingSettings[]
}

model Session {
  id        Int         @id @default(autoincrement())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  hashedRt  String?
  userId    Int
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      SessionType
}

enum SessionType {
  IOS
  ANDROID
  WEB
}

//
// ──────────────────────────────────────────────────────
//  RELATION / USER REQUESTS
// ──────────────────────────────────────────────────────
//

model UserToCompanyRelation {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  companyId Int
  user      User     @relation("RelatedCompanies", fields: [userId], references: [id], onDelete: Cascade)
  company   Company  @relation("RelatedUsers", fields: [companyId], references: [id])
  role      Role

  @@unique([userId, companyId])
}

enum FriendshipType {
  REQUEST
  FRIEND
  DENIED
  ENDED
}

enum TeamInvitationType {
  REQUEST
  TEAM
  DENIED
  ENDED
}

model Friendship {
  id                  Int            @id @default(autoincrement())
  senderId            Int
  receiverId          Int
  type                FriendshipType
  createdAt           DateTime       @default(now())
  wasLoadedByReceiver Boolean        @default(false)
  sender              User           @relation("FriendshipSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver            User           @relation("FriendshipReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
}

model TeamInvitation {
  id                  Int                @id @default(autoincrement())
  companyId           Int
  senderId            Int
  receiverId          Int
  type                TeamInvitationType
  createdAt           DateTime           @default(now())
  wasLoadedByReceiver Boolean            @default(false)
  company             Company            @relation("TeamInvitationCompany", fields: [companyId], references: [id])
  sender              User               @relation("TeamInvitationSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver            User               @relation("TeamInvitationReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
}

//
// ──────────────────────────────────────────────────────
//  COMPANY / ROLE
// ──────────────────────────────────────────────────────
//

enum Role {
  OWNER
  CHIEF
  BARISTA
}

model Company {
  id                     Int                      @id @default(autoincrement())
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  relatedToUsers         UserToCompanyRelation[]  @relation("RelatedUsers")
  sampleTypes            SampleType[]             @relation("SampleTypesOwnedByCompany")
  coffeePacks            CoffeePack[]
  cuppings               Cupping[]
  cuppingSettings        CuppingSettings[]
  sampleTesting          SampleTesting[]
  currentTeam            User[]                   @relation("CurrentUserCompany")
  isPersonal             Boolean
  companyName            String
  companyImageURL        String?
  teamInvitations        TeamInvitation[]         @relation("TeamInvitationCompany")
  companyRules           CompanyRule[]            @relation("CompanyRuleRelation")
  defaultCuppingSettings DefaultCuppingSettings[]
}

enum CompanyRuleType {
  isOwnerChief
  canChiefMakeChief
  canChiefInviteUser
  canChiefCreateCupping
  isChiefRatesPreferred
  canBaristaInviteUsers
  canBaristaCreateCupping
}

model CompanyRule {
  id              Int             @id @default(autoincrement())
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  name            String
  value           Boolean
  companyId       Int
  companyRuleType CompanyRuleType
  ruleForRole     Role
  company         Company         @relation("CompanyRuleRelation", fields: [companyId], references: [id])
}

//
// ──────────────────────────────────────────────────────
//  CUPPING / RESULT / SETTINGS
// ──────────────────────────────────────────────────────
//

model Cupping {
  id                     Int                          @id @default(autoincrement())
  createdAt              DateTime                     @default(now())
  updatedAt              DateTime                     @updatedAt
  cuppingCreatorId       Int
  cuppingCreator         User                         @relation("CreatedCuppingsByUser", fields: [cuppingCreatorId], references: [id], onDelete: Cascade)
  cuppingName            String
  cuppingType            CuppingType
  eventDate              DateTime?
  endDate                DateTime?
  companyId              Int
  settingsId             Int
  company                Company                      @relation(fields: [companyId], references: [id])
  settings               CuppingSettings              @relation(fields: [settingsId], references: [id])
  invitations            CuppingInvitation[]
  coffeePacks            CoffeePack[]                 @relation("CuppingCoffeePacks")
  sampleTestings         SampleTesting[]
  cuppingResult          CuppingSampleTestingResult[]
  cuppingHiddenPackNames CuppingHiddenPackName[]
}

model CuppingHiddenPackName {
  id             Int        @id @default(autoincrement())
  cuppingId      Int
  cupping        Cupping    @relation(fields: [cuppingId], references: [id])
  pack           CoffeePack @relation(fields: [coffeePackId], references: [id])
  coffeePackName String
  coffeePackId   Int
}

enum CuppingType {
  CREATED
  STARTED
  ARCHIVED
}

model CuppingInvitation {
  id                  Int      @id @default(autoincrement())
  createdAt           DateTime @default(now())
  cuppingId           Int
  userId              Int
  wasLoadedByReceiver Boolean  @default(false)
  cupping             Cupping  @relation(fields: [cuppingId], references: [id])
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CuppingSampleTestingResult {
  id                                 Int                                  @id @default(autoincrement())
  createdAt                          DateTime                             @default(now())
  updatedAt                          DateTime                             @updatedAt
  cuppingId                          Int
  coffeePackId                       Int
  averageScore                       Int
  cuppingSampleTestingPropertyResult CuppingSampleTestingPropertyResult[]
  cupping                            Cupping                              @relation(fields: [cuppingId], references: [id])
  coffeePack                         CoffeePack                           @relation(fields: [coffeePackId], references: [id])

  @@unique([cuppingId, coffeePackId])
}

model CuppingSampleTestingPropertyResult {
  id                           Int          @id @default(autoincrement())
  createdAt                    DateTime     @default(now())
  updatedAt                    DateTime     @updatedAt
  sampleTestingResultId        Int
  propertyType                 PropertyType
  averageIntensivityScore      Int
  averageQualityScore          Int
  averageChiefIntensivityScore Int
  averageChiefQualityScore     Int
  comments                     String[]

  sampleTestingResult CuppingSampleTestingResult @relation(fields: [sampleTestingResultId], references: [id])
}

model CuppingSettings {
  id                    Int       @id @default(autoincrement())
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  randomSamplesOrder    Boolean
  openSampleNameCupping Boolean
  singleUserCupping     Boolean
  inviteAllTeammates    Boolean
  companyId             Int
  userId                Int
  cuppings              Cupping[]
  company               Company   @relation(fields: [companyId], references: [id])
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DefaultCuppingSettings {
  id                    Int      @id @default(autoincrement())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  randomSamplesOrder    Boolean
  openSampleNameCupping Boolean
  singleUserCupping     Boolean
  inviteAllTeammates    Boolean
  defaultCuppingName    String
  companyId             Int
  userId                Int
  company               Company  @relation(fields: [companyId], references: [id])
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, companyId])
}

//
// ──────────────────────────────────────────────────────
//  SAMPLE TYPE / ITEM / ROAST TYPE / COFFEE TYPE
// ──────────────────────────────────────────────────────
//

model SampleType {
  id                  Int          @id @default(autoincrement())
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  company             Company[]    @relation("SampleTypesOwnedByCompany")
  originCompanyName   String
  sampleName          String
  beanOriginCode      Int
  procecingMethodCode Int
  roastType           Int
  grindType           Int
  labels              String[]
  sampleItems         CoffeePack[]
  isArchived          Boolean      @default(false)
}

model CoffeePack {
  id                         Int                          @id @default(autoincrement())
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @updatedAt
  companyId                  Int
  sampleTypeId               Int
  roastDate                  DateTime
  openDate                   DateTime?
  packIsOver                 Boolean                      @default(false)
  weight                     Int
  barCode                    String?
  company                    Company                      @relation(fields: [companyId], references: [id])
  sampleType                 SampleType                   @relation(fields: [sampleTypeId], references: [id])
  cuppings                   Cupping[]                    @relation("CuppingCoffeePacks")
  sampleTesting              SampleTesting[]
  cuppingHiddenPackName      CuppingHiddenPackName[]
  cuppingSampleTestingResult CuppingSampleTestingResult[]
}

//
// ──────────────────────────────────────────────────────
//  SAMPLE TESTING / PROPERTIES
// ──────────────────────────────────────────────────────
//

model SampleTesting {
  id                   Int              @id @default(autoincrement())
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  userId               Int
  companyId            Int
  cuppingId            Int
  coffeePackId         Int
  user                 User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  company              Company          @relation(fields: [companyId], references: [id])
  cupping              Cupping          @relation(fields: [cuppingId], references: [id])
  coffeePack           CoffeePack       @relation(fields: [coffeePackId], references: [id])
  userSampleProperties SampleProperty[]
}

model SampleProperty {
  id              Int           @id @default(autoincrement())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  propertyType    PropertyType
  intensity       Int
  quality         Int
  comment         String?
  sampleTestingId Int
  sampleTesting   SampleTesting @relation(fields: [sampleTestingId], references: [id], onDelete: Cascade)
}

enum PropertyType {
  AROMA
  ACIDITY
  SWEETNESS
  BODY
  AFTERTASTE
}
